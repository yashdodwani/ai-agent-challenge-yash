<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/tests/test_icici_parser.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_icici_parser.py" />
              <option name="originalContent" value="import pytest&#10;import pandas as pd&#10;from pathlib import Path&#10;import sys&#10;&#10;# Add custom_parsers to path&#10;sys.path.insert(0, str(Path(__file__).parent.parent))&#10;&#10;from custom_parsers.icici_parser import parse&#10;&#10;&#10;def test_icici_parser():&#10;    &quot;&quot;&quot;Test that parser output matches expected CSV.&quot;&quot;&quot;&#10;    # Parse PDF&#10;    pdf_path = &quot;data/icici/icici_sample.pdf&quot;&#10;    result_df = parse(pdf_path)&#10;&#10;    # Load expected CSV&#10;    expected_df = pd.read_csv(&quot;data/icici/icici_sample.csv&quot;)&#10;&#10;    # Normalize data types&#10;    for col in ['Debit Amt', 'Credit Amt', 'Balance']:&#10;        if col in result_df.columns:&#10;            result_df[col] = pd.to_numeric(result_df[col], errors='coerce')&#10;        if col in expected_df.columns:&#10;            expected_df[col] = pd.to_numeric(expected_df[col], errors='coerce')&#10;&#10;    # Check shape&#10;    assert result_df.shape == expected_df.shape, \&#10;        f&quot;Shape mismatch: got {result_df.shape}, expected {expected_df.shape}&quot;&#10;&#10;    # Check columns&#10;    assert list(result_df.columns) == list(expected_df.columns), \&#10;        f&quot;Column mismatch: got {list(result_df.columns)}&quot;&#10;&#10;    # Check data equality (allowing for minor floating point differences)&#10;    pd.testing.assert_frame_equal(&#10;        result_df.reset_index(drop=True), &#10;        expected_df.reset_index(drop=True),&#10;        check_dtype=False,&#10;        atol=0.01&#10;    )&#10;&#10;    print(&quot;✅ All tests passed!&quot;)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    test_icici_parser()&#10;" />
              <option name="updatedContent" value="import pytest&#10;import pandas as pd&#10;from pathlib import Path&#10;import sys&#10;&#10;# Add custom_parsers to path&#10;sys.path.insert(0, str(Path(__file__).parent.parent))&#10;&#10;from custom_parsers.icici_parser import parse&#10;&#10;&#10;def test_icici_parser():&#10;    &quot;&quot;&quot;Test that parser output matches expected CSV.&quot;&quot;&quot;&#10;    # Parse PDF&#10;    pdf_path = &quot;data/icici/icici_sample.pdf&quot;&#10;    result_df = parse(pdf_path)&#10;&#10;    # Load expected CSV&#10;    expected_df = pd.read_csv(&quot;data/icici/icici_sample.csv&quot;)&#10;&#10;    # Normalize data types&#10;    for col in ['Debit Amt', 'Credit Amt', 'Balance']:&#10;        if col in result_df.columns:&#10;            result_df[col] = pd.to_numeric(result_df[col], errors='coerce')&#10;        if col in expected_df.columns:&#10;            expected_df[col] = pd.to_numeric(expected_df[col], errors='coerce')&#10;&#10;    # Check shape&#10;    assert result_df.shape == expected_df.shape, \&#10;        f&quot;Shape mismatch: got {result_df.shape}, expected {expected_df.shape}&quot;&#10;&#10;    # Check columns&#10;    assert list(result_df.columns) == list(expected_df.columns), \&#10;        f&quot;Column mismatch: got {list(result_df.columns)}&quot;&#10;&#10;    # Check data equality (allowing for minor floating point differences)&#10;    pd.testing.assert_frame_equal(&#10;        result_df.reset_index(drop=True), &#10;        expected_df.reset_index(drop=True),&#10;        check_dtype=False,&#10;        atol=0.01&#10;    )&#10;&#10;    print(&quot;✅ All tests passed!&quot;)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    test_icici_parser()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>